#!/usr/bin/env bash

me=${0##*/}

UPTIME_THRESHOLD=${UPTIME_THRESHOLD//[^[:digit:]]/}
UPTIME_THRESHOLD=${UPTIME_THRESHOLD:-120}

OVERRIDE_DIR=/etc/one-context-override.d
ONE_CONTEXT_D=/etc/one-context.d
CONF=/var/one-context-override

function log(){
	logger -t "one-override[$$]" -- "$* // $(</proc/uptime)"
}

function getUptime()
{
	local uptime="$(</proc/uptime)"
	echo "${uptime%%.*}"
}

function isBooting()
{
	UPTIME="$(getUptime)"
	[ $UPTIME -le $UPTIME_THRESHOLD ]
}

function getSum()
{
	sha256sum "$1" | cut -d' ' -f 1
}

function initOverride()
{
	[ -d "${OVERRIDE_DIR}" ] || mkdir -p "${OVERRIDE_DIR}"
	while read -u 4 f; do
		n=${f##*/}
		if mv "${f}" "${OVERRIDE_DIR}"/; then
			ln -s /usr/sbin/one-context-override "${ONE_CONTEXT_D}/${n}"
			log "($?)ln -s /usr/sbin/one-context-override ${ONE_CONTEXT_D}/${n}"
		fi
	done 4< <(find "${ONE_CONTEXT_D}" -type f)
}

function upgradeOverride()
{
	local oldsum=$(getSum /usr/sbin/one-context-override)
	local newsum=$(getSum "$0")
	if [ "$newsum" = "$oldsum" ]; then
		log "$0 is up to date"
	else
		install -p -g root -o root -m 0755 "$0" /usr/sbin/one-context-override
		log "($?) install --compare -p -g root -o root -m 0755 $0 /usr/sbin/one-context-override"
	fi
	initOverride
}

function checkForUpdates()
{
	if [ -d "$MOUNT_DIR" ]; then
		if [ -f "$MOUNT_DIR/one-context-override" ]; then
			log "updating with $MOUNT_DIR/one-context-override"
			bash "$MOUNT_DIR/one-context-override" upgrade
		fi
	fi
}

function locSetUsernamePassword()
{
	RUN_CTX="${CONF}/${me}"
	[ -f "$RUN_CTX" ] || touch "$RUN_CTX"
	NEW_CTX="${RUNTIME_DIR}/${me}.new"
	grep -E 'USERNAME_SUDO|GRANT_SUDO|USERNAME_PASSWORD_RESET|USERNAME_SHELL|CRYPTED_PASSWORD_BASE64|PASSWORD_BASE64|CRYPTED_PASSWORD|PASSWORD|OVERRIDE_PASSWORD_TAG' "$CONTEXT_FILE" > "$NEW_CTX"
	log "($?) grep -E 'USERNAME_SUDO|GRANT_SUDO|USERNAME_PASSWORD_RESET|USERNAME_SHELL|CRYPTED_PASSWORD_BASE64|PASSWORD_BASE64|CRYPTED_PASSWORD|PASSWORD|OVERRIDE_PASSWORD_TAG' $CONTEXT_FILE"
	RUN_SUM=$(getSum "$RUN_CTX")
	NEW_SUM=$(getSum "$NEW_CTX")
	if [ "$NEW_SUM" = "$RUN_SUM" ]; then
		log "[$me] No changes detected"
	else
		log "run ${OVERRIDE_DIR}/${me} $@"
		"${OVERRIDE_DIR}/${me}" "$@"
		ret=$?
		if [ $ret -eq 0 ]; then
			cp "$RUN_CTX" "$RUN_CTX".old
			mv "$NEW_CTX" "$RUN_CTX"
		fi
		exit $ret
	fi
}

function locNetwork()
{
	RUN_CTX="${CONF}/${me}"
	[ -f "$RUN_CTX" ] || touch "$RUN_CTX"
	NEW_CTX="${RUNTIME_DIR}/${me}.new"
	grep -E '^ETH|OVERRIDE_NETWORK_TAG' "$CONTEXT_FILE" > "$NEW_CTX"
	log "($?) grep -E '^ETH|OVERRIDE_NETWORK_TAG' $CONTEXT_FILE"
	RUN_SUM=$(getSum "$RUN_CTX")
	NEW_SUM=$(getSum "$NEW_CTX")
	if [ "$NEW_SUM" = "$RUN_SUM" ]; then
		log "[$me] No changes detected"
	else
		isBooting && command="$1" || command=
		log "run ${OVERRIDE_DIR}/${me} $command"
		"${OVERRIDE_DIR}/${me}" $command
		ret=$?
		if [ $ret -eq 0 ]; then
			cp -f "$RUN_CTX" "$RUN_CTX".old
			mv "$NEW_CTX" "$RUN_CTX"
		fi
	    while read -u 4 l; do
			k="${l%%=*}"
			[ "${k:0:4}" = "-ETH" ] || continue
			k="${k#-}"
			ka=(${k//_/ })
			[ "${ka[1]:0:5}" = "ALIAS" ] || continue
			[ "${ka[2]}" = "IP" ] || continue
			v="${l#*=}"
			v="${v//[\"\']/}"
			curr="$(ip address list | grep "$v/")"
			iparr=($curr)
			ethdev="${iparr[${#iparr[*]}-1]}"
			log "${curr[*]} -- $ethdev"
			ipaddr="${iparr[1]}"
			log "removing $ipaddr from $ethdev ..."
			ip address del "$ipaddr" dev "$ethdev"
			log "($?) ip address del $ipaddr dev $ethdev"
		done 4< <(diff -u "$RUN_CTX".old "$RUN_CTX")
		exit $ret
	fi
}

[ -z "$1" ] || log "$0 $*"
[ -d "$CONF" ] || mkdir -p "$CONF"

env >"/var/tmp/${me}.ENV"

checkForUpdates

case "$me" in
	one-context-override)
		[ "$1" = "upgrade" ] && upgradeOverride || initOverride
		;;
    loc-10-network)
		locNetwork "$@"
		;;
    loc-20-set-username-password)
		locSetUsernamePassword "$@"
		;;
	*)
		log "exec ${OVERRIDE_DIR}/${me} $@ ..."
		exec -a "$me" "${OVERRIDE_DIR}/${me}" "$@"
		;;
esac

